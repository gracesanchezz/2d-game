<!DOCTYPE html>
<html>
<head>
  <title>2D Puzzle Game with Rewards</title>
  <style>
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      background-color: #f0f0f0;
    }
    #puzzle-board {
      width: 300px;
      height: 300px;
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      grid-template-rows: repeat(3, 1fr);
    }
    .puzzle-piece {
      width: 100px;
      height: 100px;
      border: 1px solid #000;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 24px;
      cursor: pointer;
    }
    #message {
      text-align: center;
      font-size: 20px;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div id="puzzle-board"></div>
  <div id="message"></div>

  <script>
    // Constants
    const boardSize = 3;
    const shuffleMoves = 100;

    // Variables
    let board = new Array(boardSize);
    let emptyCell = { x: boardSize - 1, y: boardSize - 1 };
    let moves = 0;
    let score = 0;

    // Initialize the game board
    function initializeBoard() {
      let counter = 1;
      for (let i = 0; i < boardSize; i++) {
        board[i] = new Array(boardSize);
        for (let j = 0; j < boardSize; j++) {
          board[i][j] = counter++;
        }
      }
      board[boardSize - 1][boardSize - 1] = 0; // Empty cell
    }

    // Shuffle the board
    function shuffleBoard() {
      for (let i = 0; i < shuffleMoves; i++) {
        const possibleMoves = [];
        if (emptyCell.x > 0) possibleMoves.push({ x: emptyCell.x - 1, y: emptyCell.y });
        if (emptyCell.x < boardSize - 1) possibleMoves.push({ x: emptyCell.x + 1, y: emptyCell.y });
        if (emptyCell.y > 0) possibleMoves.push({ x: emptyCell.x, y: emptyCell.y - 1 });
        if (emptyCell.y < boardSize - 1) possibleMoves.push({ x: emptyCell.x, y: emptyCell.y + 1 });

        const randomMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
        swapCells(emptyCell, randomMove);
        emptyCell = randomMove;
      }
    }

    // Swap two cells on the board
    function swapCells(cell1, cell2) {
      const temp = board[cell1.x][cell1.y];
      board[cell1.x][cell1.y] = board[cell2.x][cell2.y];
      board[cell2.x][cell2.y] = temp;
    }

    // Create the puzzle pieces on the board
    function createPuzzlePieces() {
      const puzzleBoard = document.getElementById("puzzle-board");

      for (let i = 0; i < boardSize; i++) {
        for (let j = 0; j < boardSize; j++) {
          const piece = document.createElement("div");
          piece.classList.add("puzzle-piece");
          piece.textContent = board[i][j];
          piece.addEventListener("click", () => movePiece(i, j));
          puzzleBoard.appendChild(piece);
        }
      }
    }

    // Move a puzzle piece if it's adjacent to the empty cell
    function movePiece(x, y) {
      if (x === emptyCell.x && Math.abs(y - emptyCell.y) === 1) {
        swapCells({ x, y }, emptyCell);
        emptyCell = { x, y };
        moves++;
        updateBoard();
        checkWin();
      } else if (y === emptyCell.y && Math.abs(x - emptyCell.x) === 1) {
        swapCells({ x, y }, emptyCell);
        emptyCell = { x, y };
        moves++;
        updateBoard();
        checkWin();
      }
    }

    // Update the puzzle board after a move
    function updateBoard() {
      const puzzleBoard = document.getElementById("puzzle-board");
      const pieces = puzzleBoard.getElementsByClassName("puzzle-piece");
      for (let i = 0; i < boardSize; i++) {
        for (let j = 0; j < boardSize; j++) {
          const piece = pieces[i * boardSize + j];
          piece.textContent = board[i][j];
        }
      }

      // Update moves and score
      document.getElementById("message").textContent = `Moves: ${moves} | Score: ${score}`;
    }

    // Check if the puzzle is complete
    function checkWin() {
      const solution = Array.from({ length: boardSize * boardSize - 1 }, (_, i) => i + 1);
      const flattenedBoard = board.flat();

      if (JSON.stringify(flattenedBoard) === JSON.stringify(solution)) {
        score = Math.max(0, 100 - moves * 2); // Adjust the scoring as needed
        document.getElementById("message").textContent = `Congratulations! Puzzle completed with a score of ${score}.`;
      }
    }

    // Initialize the game
    initializeBoard();
    shuffleBoard();
    createPuzzlePieces();
  </script>
</body>
</html>
